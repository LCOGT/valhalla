# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-30 00:15
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('proposals', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Constraints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_airmass', models.FloatField(default=2.0)),
                ('min_lunar_distance', models.FloatField(default=30.0)),
                ('max_lunar_phase', models.FloatField(blank=True, null=True)),
                ('max_seeing', models.FloatField(blank=True, null=True)),
                ('min_transparency', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Constraints',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telescope_class', models.CharField(choices=[('2m0', '2m0'), ('1m0', '1m0'), ('0m8', '0m8'), ('0m4', '0m4')], max_length=20)),
                ('site', models.CharField(blank=True, default='', max_length=20)),
                ('observatory', models.CharField(blank=True, default='', max_length=20)),
                ('telescope', models.CharField(blank=True, default='', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Molecule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('EXPOSE', 'EXPOSE'), ('SKY_FLAT', 'SKY_FLAT'), ('STANDARD', 'STANDARD'), ('ARC', 'ARC'), ('LAMP_FLAT', 'LAMP_FLAT'), ('SPECTRUM', 'SPECTRUM'), ('AUTO_FOCUS', 'AUTO_FOCUS')], max_length=50)),
                ('args', models.TextField(blank=True, default='')),
                ('priority', models.IntegerField(default=500)),
                ('ag_name', models.CharField(blank=True, default='', max_length=50)),
                ('ag_mode', models.CharField(choices=[('OPTIONAL', 'OPTIONAL'), ('ON', 'ON'), ('OFF', 'OFF')], default='OPTIONAL', max_length=50)),
                ('ag_filter', models.CharField(blank=True, default='', max_length=50)),
                ('ag_exp_time', models.FloatField(blank=True, null=True)),
                ('instrument_name', models.CharField(max_length=255)),
                ('filter', models.CharField(blank=True, default='', max_length=255)),
                ('readout_mode', models.CharField(blank=True, default='', max_length=50)),
                ('spectra_lamp', models.CharField(blank=True, default='', max_length=50)),
                ('spectra_slit', models.CharField(blank=True, default='', max_length=50)),
                ('acquire_mode', models.CharField(blank=True, choices=[('OFF', 'OFF'), ('WCS', 'WCS'), ('BRIGHTEST', 'BRIGHTEST')], default='OFF', max_length=50)),
                ('acquire_radius_arcsec', models.FloatField(blank=True, default=0.0)),
                ('exposure_time', models.FloatField()),
                ('exposure_count', models.PositiveIntegerField()),
                ('bin_x', models.PositiveSmallIntegerField(blank=True, default=1)),
                ('bin_y', models.PositiveSmallIntegerField(blank=True, default=1)),
                ('sub_x1', models.PositiveIntegerField(blank=True, null=True)),
                ('sub_x2', models.PositiveIntegerField(blank=True, null=True)),
                ('sub_y1', models.PositiveIntegerField(blank=True, null=True)),
                ('sub_y2', models.PositiveIntegerField(blank=True, null=True)),
                ('defocus', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_note', models.CharField(blank=True, default='', max_length=255)),
                ('state', models.CharField(choices=[('PENDING', 'PENDING'), ('SCHEDULED', 'SCHEDULED'), ('COMPLETED', 'COMPLETED'), ('FAILED', 'FAILED'), ('PARTIALLY_COMPLETE', 'PARTIALLY COMPLETE'), ('NOT_ATTEMPTED', 'NOT ATTEMPTED')], default='PENDING', max_length=40)),
                ('modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('observation_type', models.CharField(choices=[('NORMAL', 'NORMAL'), ('TARGET_OF_OPPORTUNITY', 'TARGET_OF_OPPORTUNITY')], default='NORMAL', max_length=40)),
                ('fail_count', models.PositiveIntegerField(default=0)),
                ('scheduled_count', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('completed', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('SIDEREAL', 'SIDEREAL'), ('NON_SIDEREAL', 'NON_SIDEREAL'), ('STATIC', 'STATIC'), ('SATELLITE', 'SATELLITE')], max_length=255)),
                ('roll', models.FloatField(blank=True, null=True)),
                ('pitch', models.FloatField(blank=True, null=True)),
                ('hour_angle', models.FloatField(blank=True, null=True)),
                ('ra', models.FloatField(blank=True, null=True)),
                ('dec', models.FloatField(blank=True, null=True)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('azimuth', models.FloatField(blank=True, null=True)),
                ('coordinate_system', models.CharField(blank=True, default='', max_length=255)),
                ('equinox', models.CharField(blank=True, default='', max_length=20)),
                ('proper_motion_ra', models.FloatField(blank=True, null=True)),
                ('proper_motion_dec', models.FloatField(blank=True, null=True)),
                ('epoch', models.FloatField(blank=True, max_length=20, null=True)),
                ('parallax', models.FloatField(blank=True, null=True)),
                ('diff_pitch_rate', models.FloatField(blank=True, null=True, verbose_name='Differential Pitch Rate (arcsec/s)')),
                ('diff_roll_rate', models.FloatField(blank=True, null=True, verbose_name='Differential Roll Rate  (arcsec/s)')),
                ('diff_epoch_rate', models.FloatField(blank=True, null=True, verbose_name='Reference time for non-sidereal motion (MJD)')),
                ('diff_pitch_acceleration', models.FloatField(blank=True, null=True, verbose_name='Differential Pitch Acceleration (arcsec/s^2)')),
                ('diff_roll_acceleration', models.FloatField(blank=True, null=True, verbose_name='Differential Role Acceleration (arcsec/s^2)')),
                ('scheme', models.CharField(blank=True, choices=[('ASA_MAJOR_PLANET', 'ASA_MAJOR_PLANET'), ('ASA_MINOR_PLANET', 'ASA_MINOR_PLANET'), ('ASA_COMET', 'ASA_COMET'), ('JPL_MAJOR_PLANET', 'JPL_MAJOR_PLANET'), ('JPL_MINOR_PLANET', 'JPL_MINOR_PLANET'), ('MPC_MINOR_PLANET', 'MPC_MINOR_PLANET'), ('MPC_COMET', 'MPC_COMET')], default='', max_length=50, verbose_name='Orbital Element Scheme')),
                ('epochofel', models.FloatField(blank=True, null=True, verbose_name='Epoch of elements (MJD)')),
                ('orbinc', models.FloatField(blank=True, null=True, verbose_name='Orbital inclination (deg)')),
                ('longascnode', models.FloatField(blank=True, null=True, verbose_name='Longitude of ascending node (deg)')),
                ('longofperih', models.FloatField(blank=True, null=True, verbose_name='Longitude of perihelion (deg)')),
                ('argofperih', models.FloatField(blank=True, null=True, verbose_name='Argument of perihelion (deg)')),
                ('meandist', models.FloatField(blank=True, null=True, verbose_name='Mean distance (AU)')),
                ('perihdist', models.FloatField(blank=True, null=True, verbose_name='Perihelion distance (AU)')),
                ('eccentricity', models.FloatField(blank=True, null=True, verbose_name='Eccentricity')),
                ('meanlong', models.FloatField(blank=True, null=True, verbose_name='Mean longitude (deg)')),
                ('meananom', models.FloatField(blank=True, null=True, verbose_name='Mean anomoly (deg)')),
                ('dailymot', models.FloatField(blank=True, null=True, verbose_name='Daily motion (deg)')),
                ('epochofperih', models.FloatField(blank=True, null=True, verbose_name='Epoch of perihelion (MJD)')),
                ('acquire_mode', models.CharField(choices=[('OPTIONAL', 'OPTIONAL'), ('ON', 'ON')], default='OPTIONAL', max_length=50)),
                ('rot_mode', models.CharField(blank=True, choices=[('SKY', 'SKY'), ('FLOAT', 'FLOAT'), ('VERTICAL', 'VERTICAL'), ('VFLOAT', 'VFLOAT')], default='', max_length=50)),
                ('rot_angle', models.FloatField(blank=True, null=True)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='userrequests.Request')),
            ],
        ),
        migrations.CreateModel(
            name='UserRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.CharField(blank=True, default='', max_length=50)),
                ('operator', models.CharField(choices=[('AND', 'AND'), ('SINGLE', 'SINGLE'), ('MANY', 'MANY')], max_length=20)),
                ('ipp_value', models.FloatField(default=1.0)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('state', models.CharField(choices=[('PENDING', 'PENDING'), ('SCHEDULED', 'SCHEDULED'), ('COMPLETED', 'COMPLETED'), ('PARTIALLY_COMPLETE', 'PARTIALLY COMPLETE'), ('NOT_ATTEMPTED', 'NOT ATTEMPTED'), ('CANCELED', 'CANCELED')], default='PENDING', max_length=40)),
                ('modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proposals.Proposal')),
                ('submitter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Window',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userrequests.Request')),
            ],
        ),
        migrations.AddField(
            model_name='request',
            name='user_request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userrequests.UserRequest'),
        ),
        migrations.AddField(
            model_name='molecule',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userrequests.Request'),
        ),
        migrations.AddField(
            model_name='location',
            name='request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='userrequests.Request'),
        ),
        migrations.AddField(
            model_name='constraints',
            name='request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='userrequests.Request'),
        ),
    ]
